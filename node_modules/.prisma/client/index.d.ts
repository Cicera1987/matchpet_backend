
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Condition
 * 
 */
export type Condition = $Result.DefaultSelection<Prisma.$ConditionPayload>
/**
 * Model Rules
 * 
 */
export type Rules = $Result.DefaultSelection<Prisma.$RulesPayload>
/**
 * Model Values
 * 
 */
export type Values = $Result.DefaultSelection<Prisma.$ValuesPayload>
/**
 * Model Variable
 * 
 */
export type Variable = $Result.DefaultSelection<Prisma.$VariablePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const conditions_type: {
  IF: 'IF',
  THEN: 'THEN'
};

export type conditions_type = (typeof conditions_type)[keyof typeof conditions_type]

}

export type conditions_type = $Enums.conditions_type

export const conditions_type: typeof $Enums.conditions_type

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Conditions
 * const conditions = await prisma.condition.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Conditions
   * const conditions = await prisma.condition.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.condition`: Exposes CRUD operations for the **Condition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Conditions
    * const conditions = await prisma.condition.findMany()
    * ```
    */
  get condition(): Prisma.ConditionDelegate<ExtArgs>;

  /**
   * `prisma.rules`: Exposes CRUD operations for the **Rules** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rules
    * const rules = await prisma.rules.findMany()
    * ```
    */
  get rules(): Prisma.RulesDelegate<ExtArgs>;

  /**
   * `prisma.values`: Exposes CRUD operations for the **Values** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Values
    * const values = await prisma.values.findMany()
    * ```
    */
  get values(): Prisma.ValuesDelegate<ExtArgs>;

  /**
   * `prisma.variable`: Exposes CRUD operations for the **Variable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Variables
    * const variables = await prisma.variable.findMany()
    * ```
    */
  get variable(): Prisma.VariableDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Condition: 'Condition',
    Rules: 'Rules',
    Values: 'Values',
    Variable: 'Variable'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'condition' | 'rules' | 'values' | 'variable'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Condition: {
        payload: Prisma.$ConditionPayload<ExtArgs>
        fields: Prisma.ConditionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConditionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConditionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>
          }
          findFirst: {
            args: Prisma.ConditionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConditionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>
          }
          findMany: {
            args: Prisma.ConditionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>[]
          }
          create: {
            args: Prisma.ConditionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>
          }
          createMany: {
            args: Prisma.ConditionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ConditionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>
          }
          update: {
            args: Prisma.ConditionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>
          }
          deleteMany: {
            args: Prisma.ConditionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ConditionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ConditionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConditionPayload>
          }
          aggregate: {
            args: Prisma.ConditionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCondition>
          }
          groupBy: {
            args: Prisma.ConditionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConditionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConditionCountArgs<ExtArgs>,
            result: $Utils.Optional<ConditionCountAggregateOutputType> | number
          }
        }
      }
      Rules: {
        payload: Prisma.$RulesPayload<ExtArgs>
        fields: Prisma.RulesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RulesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RulesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RulesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RulesPayload>
          }
          findFirst: {
            args: Prisma.RulesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RulesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RulesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RulesPayload>
          }
          findMany: {
            args: Prisma.RulesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RulesPayload>[]
          }
          create: {
            args: Prisma.RulesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RulesPayload>
          }
          createMany: {
            args: Prisma.RulesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RulesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RulesPayload>
          }
          update: {
            args: Prisma.RulesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RulesPayload>
          }
          deleteMany: {
            args: Prisma.RulesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RulesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RulesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RulesPayload>
          }
          aggregate: {
            args: Prisma.RulesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRules>
          }
          groupBy: {
            args: Prisma.RulesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RulesGroupByOutputType>[]
          }
          count: {
            args: Prisma.RulesCountArgs<ExtArgs>,
            result: $Utils.Optional<RulesCountAggregateOutputType> | number
          }
        }
      }
      Values: {
        payload: Prisma.$ValuesPayload<ExtArgs>
        fields: Prisma.ValuesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ValuesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ValuesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ValuesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ValuesPayload>
          }
          findFirst: {
            args: Prisma.ValuesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ValuesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ValuesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ValuesPayload>
          }
          findMany: {
            args: Prisma.ValuesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ValuesPayload>[]
          }
          create: {
            args: Prisma.ValuesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ValuesPayload>
          }
          createMany: {
            args: Prisma.ValuesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ValuesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ValuesPayload>
          }
          update: {
            args: Prisma.ValuesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ValuesPayload>
          }
          deleteMany: {
            args: Prisma.ValuesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ValuesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ValuesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ValuesPayload>
          }
          aggregate: {
            args: Prisma.ValuesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateValues>
          }
          groupBy: {
            args: Prisma.ValuesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ValuesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ValuesCountArgs<ExtArgs>,
            result: $Utils.Optional<ValuesCountAggregateOutputType> | number
          }
        }
      }
      Variable: {
        payload: Prisma.$VariablePayload<ExtArgs>
        fields: Prisma.VariableFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VariableFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VariablePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VariableFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>
          }
          findFirst: {
            args: Prisma.VariableFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VariablePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VariableFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>
          }
          findMany: {
            args: Prisma.VariableFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>[]
          }
          create: {
            args: Prisma.VariableCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>
          }
          createMany: {
            args: Prisma.VariableCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VariableDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>
          }
          update: {
            args: Prisma.VariableUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>
          }
          deleteMany: {
            args: Prisma.VariableDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VariableUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VariableUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VariablePayload>
          }
          aggregate: {
            args: Prisma.VariableAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVariable>
          }
          groupBy: {
            args: Prisma.VariableGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VariableGroupByOutputType>[]
          }
          count: {
            args: Prisma.VariableCountArgs<ExtArgs>,
            result: $Utils.Optional<VariableCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RulesCountOutputType
   */

  export type RulesCountOutputType = {
    Condition: number
  }

  export type RulesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Condition?: boolean | RulesCountOutputTypeCountConditionArgs
  }

  // Custom InputTypes

  /**
   * RulesCountOutputType without action
   */
  export type RulesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RulesCountOutputType
     */
    select?: RulesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RulesCountOutputType without action
   */
  export type RulesCountOutputTypeCountConditionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConditionWhereInput
  }



  /**
   * Count Type VariableCountOutputType
   */

  export type VariableCountOutputType = {
    Values: number
  }

  export type VariableCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Values?: boolean | VariableCountOutputTypeCountValuesArgs
  }

  // Custom InputTypes

  /**
   * VariableCountOutputType without action
   */
  export type VariableCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariableCountOutputType
     */
    select?: VariableCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * VariableCountOutputType without action
   */
  export type VariableCountOutputTypeCountValuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValuesWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Condition
   */

  export type AggregateCondition = {
    _count: ConditionCountAggregateOutputType | null
    _avg: ConditionAvgAggregateOutputType | null
    _sum: ConditionSumAggregateOutputType | null
    _min: ConditionMinAggregateOutputType | null
    _max: ConditionMaxAggregateOutputType | null
  }

  export type ConditionAvgAggregateOutputType = {
    id: number | null
    id_variable: number | null
    id_rule: number | null
  }

  export type ConditionSumAggregateOutputType = {
    id: number | null
    id_variable: number | null
    id_rule: number | null
  }

  export type ConditionMinAggregateOutputType = {
    id: number | null
    operator: string | null
    value: string | null
    id_variable: number | null
    id_rule: number | null
    type: $Enums.conditions_type | null
  }

  export type ConditionMaxAggregateOutputType = {
    id: number | null
    operator: string | null
    value: string | null
    id_variable: number | null
    id_rule: number | null
    type: $Enums.conditions_type | null
  }

  export type ConditionCountAggregateOutputType = {
    id: number
    operator: number
    value: number
    id_variable: number
    id_rule: number
    type: number
    _all: number
  }


  export type ConditionAvgAggregateInputType = {
    id?: true
    id_variable?: true
    id_rule?: true
  }

  export type ConditionSumAggregateInputType = {
    id?: true
    id_variable?: true
    id_rule?: true
  }

  export type ConditionMinAggregateInputType = {
    id?: true
    operator?: true
    value?: true
    id_variable?: true
    id_rule?: true
    type?: true
  }

  export type ConditionMaxAggregateInputType = {
    id?: true
    operator?: true
    value?: true
    id_variable?: true
    id_rule?: true
    type?: true
  }

  export type ConditionCountAggregateInputType = {
    id?: true
    operator?: true
    value?: true
    id_variable?: true
    id_rule?: true
    type?: true
    _all?: true
  }

  export type ConditionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Condition to aggregate.
     */
    where?: ConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conditions to fetch.
     */
    orderBy?: ConditionOrderByWithRelationInput | ConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Conditions
    **/
    _count?: true | ConditionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConditionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConditionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConditionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConditionMaxAggregateInputType
  }

  export type GetConditionAggregateType<T extends ConditionAggregateArgs> = {
        [P in keyof T & keyof AggregateCondition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCondition[P]>
      : GetScalarType<T[P], AggregateCondition[P]>
  }




  export type ConditionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConditionWhereInput
    orderBy?: ConditionOrderByWithAggregationInput | ConditionOrderByWithAggregationInput[]
    by: ConditionScalarFieldEnum[] | ConditionScalarFieldEnum
    having?: ConditionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConditionCountAggregateInputType | true
    _avg?: ConditionAvgAggregateInputType
    _sum?: ConditionSumAggregateInputType
    _min?: ConditionMinAggregateInputType
    _max?: ConditionMaxAggregateInputType
  }

  export type ConditionGroupByOutputType = {
    id: number
    operator: string
    value: string
    id_variable: number
    id_rule: number
    type: $Enums.conditions_type
    _count: ConditionCountAggregateOutputType | null
    _avg: ConditionAvgAggregateOutputType | null
    _sum: ConditionSumAggregateOutputType | null
    _min: ConditionMinAggregateOutputType | null
    _max: ConditionMaxAggregateOutputType | null
  }

  type GetConditionGroupByPayload<T extends ConditionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConditionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConditionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConditionGroupByOutputType[P]>
            : GetScalarType<T[P], ConditionGroupByOutputType[P]>
        }
      >
    >


  export type ConditionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    operator?: boolean
    value?: boolean
    id_variable?: boolean
    id_rule?: boolean
    type?: boolean
    Rules?: boolean | RulesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["condition"]>

  export type ConditionSelectScalar = {
    id?: boolean
    operator?: boolean
    value?: boolean
    id_variable?: boolean
    id_rule?: boolean
    type?: boolean
  }

  export type ConditionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Rules?: boolean | RulesDefaultArgs<ExtArgs>
  }


  export type $ConditionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Condition"
    objects: {
      Rules: Prisma.$RulesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      operator: string
      value: string
      id_variable: number
      id_rule: number
      type: $Enums.conditions_type
    }, ExtArgs["result"]["condition"]>
    composites: {}
  }


  type ConditionGetPayload<S extends boolean | null | undefined | ConditionDefaultArgs> = $Result.GetResult<Prisma.$ConditionPayload, S>

  type ConditionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ConditionFindManyArgs, 'select' | 'include'> & {
      select?: ConditionCountAggregateInputType | true
    }

  export interface ConditionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Condition'], meta: { name: 'Condition' } }
    /**
     * Find zero or one Condition that matches the filter.
     * @param {ConditionFindUniqueArgs} args - Arguments to find a Condition
     * @example
     * // Get one Condition
     * const condition = await prisma.condition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConditionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ConditionFindUniqueArgs<ExtArgs>>
    ): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Condition that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ConditionFindUniqueOrThrowArgs} args - Arguments to find a Condition
     * @example
     * // Get one Condition
     * const condition = await prisma.condition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConditionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConditionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Condition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionFindFirstArgs} args - Arguments to find a Condition
     * @example
     * // Get one Condition
     * const condition = await prisma.condition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConditionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ConditionFindFirstArgs<ExtArgs>>
    ): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Condition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionFindFirstOrThrowArgs} args - Arguments to find a Condition
     * @example
     * // Get one Condition
     * const condition = await prisma.condition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConditionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConditionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Conditions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Conditions
     * const conditions = await prisma.condition.findMany()
     * 
     * // Get first 10 Conditions
     * const conditions = await prisma.condition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const conditionWithIdOnly = await prisma.condition.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConditionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConditionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Condition.
     * @param {ConditionCreateArgs} args - Arguments to create a Condition.
     * @example
     * // Create one Condition
     * const Condition = await prisma.condition.create({
     *   data: {
     *     // ... data to create a Condition
     *   }
     * })
     * 
    **/
    create<T extends ConditionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ConditionCreateArgs<ExtArgs>>
    ): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Conditions.
     *     @param {ConditionCreateManyArgs} args - Arguments to create many Conditions.
     *     @example
     *     // Create many Conditions
     *     const condition = await prisma.condition.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConditionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConditionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Condition.
     * @param {ConditionDeleteArgs} args - Arguments to delete one Condition.
     * @example
     * // Delete one Condition
     * const Condition = await prisma.condition.delete({
     *   where: {
     *     // ... filter to delete one Condition
     *   }
     * })
     * 
    **/
    delete<T extends ConditionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ConditionDeleteArgs<ExtArgs>>
    ): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Condition.
     * @param {ConditionUpdateArgs} args - Arguments to update one Condition.
     * @example
     * // Update one Condition
     * const condition = await prisma.condition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConditionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ConditionUpdateArgs<ExtArgs>>
    ): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Conditions.
     * @param {ConditionDeleteManyArgs} args - Arguments to filter Conditions to delete.
     * @example
     * // Delete a few Conditions
     * const { count } = await prisma.condition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConditionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConditionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Conditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Conditions
     * const condition = await prisma.condition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConditionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ConditionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Condition.
     * @param {ConditionUpsertArgs} args - Arguments to update or create a Condition.
     * @example
     * // Update or create a Condition
     * const condition = await prisma.condition.upsert({
     *   create: {
     *     // ... data to create a Condition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Condition we want to update
     *   }
     * })
    **/
    upsert<T extends ConditionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ConditionUpsertArgs<ExtArgs>>
    ): Prisma__ConditionClient<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Conditions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionCountArgs} args - Arguments to filter Conditions to count.
     * @example
     * // Count the number of Conditions
     * const count = await prisma.condition.count({
     *   where: {
     *     // ... the filter for the Conditions we want to count
     *   }
     * })
    **/
    count<T extends ConditionCountArgs>(
      args?: Subset<T, ConditionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConditionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Condition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConditionAggregateArgs>(args: Subset<T, ConditionAggregateArgs>): Prisma.PrismaPromise<GetConditionAggregateType<T>>

    /**
     * Group by Condition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConditionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConditionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConditionGroupByArgs['orderBy'] }
        : { orderBy?: ConditionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConditionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConditionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Condition model
   */
  readonly fields: ConditionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Condition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConditionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Rules<T extends RulesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RulesDefaultArgs<ExtArgs>>): Prisma__RulesClient<$Result.GetResult<Prisma.$RulesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Condition model
   */ 
  interface ConditionFieldRefs {
    readonly id: FieldRef<"Condition", 'Int'>
    readonly operator: FieldRef<"Condition", 'String'>
    readonly value: FieldRef<"Condition", 'String'>
    readonly id_variable: FieldRef<"Condition", 'Int'>
    readonly id_rule: FieldRef<"Condition", 'Int'>
    readonly type: FieldRef<"Condition", 'conditions_type'>
  }
    

  // Custom InputTypes

  /**
   * Condition findUnique
   */
  export type ConditionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * Filter, which Condition to fetch.
     */
    where: ConditionWhereUniqueInput
  }


  /**
   * Condition findUniqueOrThrow
   */
  export type ConditionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * Filter, which Condition to fetch.
     */
    where: ConditionWhereUniqueInput
  }


  /**
   * Condition findFirst
   */
  export type ConditionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * Filter, which Condition to fetch.
     */
    where?: ConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conditions to fetch.
     */
    orderBy?: ConditionOrderByWithRelationInput | ConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conditions.
     */
    cursor?: ConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conditions.
     */
    distinct?: ConditionScalarFieldEnum | ConditionScalarFieldEnum[]
  }


  /**
   * Condition findFirstOrThrow
   */
  export type ConditionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * Filter, which Condition to fetch.
     */
    where?: ConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conditions to fetch.
     */
    orderBy?: ConditionOrderByWithRelationInput | ConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Conditions.
     */
    cursor?: ConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conditions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Conditions.
     */
    distinct?: ConditionScalarFieldEnum | ConditionScalarFieldEnum[]
  }


  /**
   * Condition findMany
   */
  export type ConditionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * Filter, which Conditions to fetch.
     */
    where?: ConditionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Conditions to fetch.
     */
    orderBy?: ConditionOrderByWithRelationInput | ConditionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Conditions.
     */
    cursor?: ConditionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Conditions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Conditions.
     */
    skip?: number
    distinct?: ConditionScalarFieldEnum | ConditionScalarFieldEnum[]
  }


  /**
   * Condition create
   */
  export type ConditionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * The data needed to create a Condition.
     */
    data: XOR<ConditionCreateInput, ConditionUncheckedCreateInput>
  }


  /**
   * Condition createMany
   */
  export type ConditionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Conditions.
     */
    data: ConditionCreateManyInput | ConditionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Condition update
   */
  export type ConditionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * The data needed to update a Condition.
     */
    data: XOR<ConditionUpdateInput, ConditionUncheckedUpdateInput>
    /**
     * Choose, which Condition to update.
     */
    where: ConditionWhereUniqueInput
  }


  /**
   * Condition updateMany
   */
  export type ConditionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Conditions.
     */
    data: XOR<ConditionUpdateManyMutationInput, ConditionUncheckedUpdateManyInput>
    /**
     * Filter which Conditions to update
     */
    where?: ConditionWhereInput
  }


  /**
   * Condition upsert
   */
  export type ConditionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * The filter to search for the Condition to update in case it exists.
     */
    where: ConditionWhereUniqueInput
    /**
     * In case the Condition found by the `where` argument doesn't exist, create a new Condition with this data.
     */
    create: XOR<ConditionCreateInput, ConditionUncheckedCreateInput>
    /**
     * In case the Condition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConditionUpdateInput, ConditionUncheckedUpdateInput>
  }


  /**
   * Condition delete
   */
  export type ConditionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConditionInclude<ExtArgs> | null
    /**
     * Filter which Condition to delete.
     */
    where: ConditionWhereUniqueInput
  }


  /**
   * Condition deleteMany
   */
  export type ConditionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Conditions to delete
     */
    where?: ConditionWhereInput
  }


  /**
   * Condition without action
   */
  export type ConditionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConditionInclude<ExtArgs> | null
  }



  /**
   * Model Rules
   */

  export type AggregateRules = {
    _count: RulesCountAggregateOutputType | null
    _avg: RulesAvgAggregateOutputType | null
    _sum: RulesSumAggregateOutputType | null
    _min: RulesMinAggregateOutputType | null
    _max: RulesMaxAggregateOutputType | null
  }

  export type RulesAvgAggregateOutputType = {
    id: number | null
  }

  export type RulesSumAggregateOutputType = {
    id: number | null
  }

  export type RulesMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RulesMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RulesCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RulesAvgAggregateInputType = {
    id?: true
  }

  export type RulesSumAggregateInputType = {
    id?: true
  }

  export type RulesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RulesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RulesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RulesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rules to aggregate.
     */
    where?: RulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rules to fetch.
     */
    orderBy?: RulesOrderByWithRelationInput | RulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rules
    **/
    _count?: true | RulesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RulesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RulesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RulesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RulesMaxAggregateInputType
  }

  export type GetRulesAggregateType<T extends RulesAggregateArgs> = {
        [P in keyof T & keyof AggregateRules]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRules[P]>
      : GetScalarType<T[P], AggregateRules[P]>
  }




  export type RulesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RulesWhereInput
    orderBy?: RulesOrderByWithAggregationInput | RulesOrderByWithAggregationInput[]
    by: RulesScalarFieldEnum[] | RulesScalarFieldEnum
    having?: RulesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RulesCountAggregateInputType | true
    _avg?: RulesAvgAggregateInputType
    _sum?: RulesSumAggregateInputType
    _min?: RulesMinAggregateInputType
    _max?: RulesMaxAggregateInputType
  }

  export type RulesGroupByOutputType = {
    id: number
    name: string
    _count: RulesCountAggregateOutputType | null
    _avg: RulesAvgAggregateOutputType | null
    _sum: RulesSumAggregateOutputType | null
    _min: RulesMinAggregateOutputType | null
    _max: RulesMaxAggregateOutputType | null
  }

  type GetRulesGroupByPayload<T extends RulesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RulesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RulesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RulesGroupByOutputType[P]>
            : GetScalarType<T[P], RulesGroupByOutputType[P]>
        }
      >
    >


  export type RulesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Condition?: boolean | Rules$ConditionArgs<ExtArgs>
    _count?: boolean | RulesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rules"]>

  export type RulesSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type RulesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Condition?: boolean | Rules$ConditionArgs<ExtArgs>
    _count?: boolean | RulesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $RulesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rules"
    objects: {
      Condition: Prisma.$ConditionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["rules"]>
    composites: {}
  }


  type RulesGetPayload<S extends boolean | null | undefined | RulesDefaultArgs> = $Result.GetResult<Prisma.$RulesPayload, S>

  type RulesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RulesFindManyArgs, 'select' | 'include'> & {
      select?: RulesCountAggregateInputType | true
    }

  export interface RulesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rules'], meta: { name: 'Rules' } }
    /**
     * Find zero or one Rules that matches the filter.
     * @param {RulesFindUniqueArgs} args - Arguments to find a Rules
     * @example
     * // Get one Rules
     * const rules = await prisma.rules.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RulesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RulesFindUniqueArgs<ExtArgs>>
    ): Prisma__RulesClient<$Result.GetResult<Prisma.$RulesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Rules that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RulesFindUniqueOrThrowArgs} args - Arguments to find a Rules
     * @example
     * // Get one Rules
     * const rules = await prisma.rules.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RulesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RulesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RulesClient<$Result.GetResult<Prisma.$RulesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Rules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RulesFindFirstArgs} args - Arguments to find a Rules
     * @example
     * // Get one Rules
     * const rules = await prisma.rules.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RulesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RulesFindFirstArgs<ExtArgs>>
    ): Prisma__RulesClient<$Result.GetResult<Prisma.$RulesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Rules that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RulesFindFirstOrThrowArgs} args - Arguments to find a Rules
     * @example
     * // Get one Rules
     * const rules = await prisma.rules.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RulesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RulesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RulesClient<$Result.GetResult<Prisma.$RulesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Rules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RulesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rules
     * const rules = await prisma.rules.findMany()
     * 
     * // Get first 10 Rules
     * const rules = await prisma.rules.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rulesWithIdOnly = await prisma.rules.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RulesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RulesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RulesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Rules.
     * @param {RulesCreateArgs} args - Arguments to create a Rules.
     * @example
     * // Create one Rules
     * const Rules = await prisma.rules.create({
     *   data: {
     *     // ... data to create a Rules
     *   }
     * })
     * 
    **/
    create<T extends RulesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RulesCreateArgs<ExtArgs>>
    ): Prisma__RulesClient<$Result.GetResult<Prisma.$RulesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Rules.
     *     @param {RulesCreateManyArgs} args - Arguments to create many Rules.
     *     @example
     *     // Create many Rules
     *     const rules = await prisma.rules.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RulesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RulesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rules.
     * @param {RulesDeleteArgs} args - Arguments to delete one Rules.
     * @example
     * // Delete one Rules
     * const Rules = await prisma.rules.delete({
     *   where: {
     *     // ... filter to delete one Rules
     *   }
     * })
     * 
    **/
    delete<T extends RulesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RulesDeleteArgs<ExtArgs>>
    ): Prisma__RulesClient<$Result.GetResult<Prisma.$RulesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Rules.
     * @param {RulesUpdateArgs} args - Arguments to update one Rules.
     * @example
     * // Update one Rules
     * const rules = await prisma.rules.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RulesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RulesUpdateArgs<ExtArgs>>
    ): Prisma__RulesClient<$Result.GetResult<Prisma.$RulesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Rules.
     * @param {RulesDeleteManyArgs} args - Arguments to filter Rules to delete.
     * @example
     * // Delete a few Rules
     * const { count } = await prisma.rules.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RulesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RulesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RulesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rules
     * const rules = await prisma.rules.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RulesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RulesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rules.
     * @param {RulesUpsertArgs} args - Arguments to update or create a Rules.
     * @example
     * // Update or create a Rules
     * const rules = await prisma.rules.upsert({
     *   create: {
     *     // ... data to create a Rules
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rules we want to update
     *   }
     * })
    **/
    upsert<T extends RulesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RulesUpsertArgs<ExtArgs>>
    ): Prisma__RulesClient<$Result.GetResult<Prisma.$RulesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RulesCountArgs} args - Arguments to filter Rules to count.
     * @example
     * // Count the number of Rules
     * const count = await prisma.rules.count({
     *   where: {
     *     // ... the filter for the Rules we want to count
     *   }
     * })
    **/
    count<T extends RulesCountArgs>(
      args?: Subset<T, RulesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RulesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RulesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RulesAggregateArgs>(args: Subset<T, RulesAggregateArgs>): Prisma.PrismaPromise<GetRulesAggregateType<T>>

    /**
     * Group by Rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RulesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RulesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RulesGroupByArgs['orderBy'] }
        : { orderBy?: RulesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RulesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRulesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rules model
   */
  readonly fields: RulesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rules.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RulesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Condition<T extends Rules$ConditionArgs<ExtArgs> = {}>(args?: Subset<T, Rules$ConditionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConditionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Rules model
   */ 
  interface RulesFieldRefs {
    readonly id: FieldRef<"Rules", 'Int'>
    readonly name: FieldRef<"Rules", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Rules findUnique
   */
  export type RulesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rules
     */
    select?: RulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RulesInclude<ExtArgs> | null
    /**
     * Filter, which Rules to fetch.
     */
    where: RulesWhereUniqueInput
  }


  /**
   * Rules findUniqueOrThrow
   */
  export type RulesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rules
     */
    select?: RulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RulesInclude<ExtArgs> | null
    /**
     * Filter, which Rules to fetch.
     */
    where: RulesWhereUniqueInput
  }


  /**
   * Rules findFirst
   */
  export type RulesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rules
     */
    select?: RulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RulesInclude<ExtArgs> | null
    /**
     * Filter, which Rules to fetch.
     */
    where?: RulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rules to fetch.
     */
    orderBy?: RulesOrderByWithRelationInput | RulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rules.
     */
    cursor?: RulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rules.
     */
    distinct?: RulesScalarFieldEnum | RulesScalarFieldEnum[]
  }


  /**
   * Rules findFirstOrThrow
   */
  export type RulesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rules
     */
    select?: RulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RulesInclude<ExtArgs> | null
    /**
     * Filter, which Rules to fetch.
     */
    where?: RulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rules to fetch.
     */
    orderBy?: RulesOrderByWithRelationInput | RulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rules.
     */
    cursor?: RulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rules.
     */
    distinct?: RulesScalarFieldEnum | RulesScalarFieldEnum[]
  }


  /**
   * Rules findMany
   */
  export type RulesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rules
     */
    select?: RulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RulesInclude<ExtArgs> | null
    /**
     * Filter, which Rules to fetch.
     */
    where?: RulesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rules to fetch.
     */
    orderBy?: RulesOrderByWithRelationInput | RulesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rules.
     */
    cursor?: RulesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rules.
     */
    skip?: number
    distinct?: RulesScalarFieldEnum | RulesScalarFieldEnum[]
  }


  /**
   * Rules create
   */
  export type RulesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rules
     */
    select?: RulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RulesInclude<ExtArgs> | null
    /**
     * The data needed to create a Rules.
     */
    data: XOR<RulesCreateInput, RulesUncheckedCreateInput>
  }


  /**
   * Rules createMany
   */
  export type RulesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rules.
     */
    data: RulesCreateManyInput | RulesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Rules update
   */
  export type RulesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rules
     */
    select?: RulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RulesInclude<ExtArgs> | null
    /**
     * The data needed to update a Rules.
     */
    data: XOR<RulesUpdateInput, RulesUncheckedUpdateInput>
    /**
     * Choose, which Rules to update.
     */
    where: RulesWhereUniqueInput
  }


  /**
   * Rules updateMany
   */
  export type RulesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rules.
     */
    data: XOR<RulesUpdateManyMutationInput, RulesUncheckedUpdateManyInput>
    /**
     * Filter which Rules to update
     */
    where?: RulesWhereInput
  }


  /**
   * Rules upsert
   */
  export type RulesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rules
     */
    select?: RulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RulesInclude<ExtArgs> | null
    /**
     * The filter to search for the Rules to update in case it exists.
     */
    where: RulesWhereUniqueInput
    /**
     * In case the Rules found by the `where` argument doesn't exist, create a new Rules with this data.
     */
    create: XOR<RulesCreateInput, RulesUncheckedCreateInput>
    /**
     * In case the Rules was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RulesUpdateInput, RulesUncheckedUpdateInput>
  }


  /**
   * Rules delete
   */
  export type RulesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rules
     */
    select?: RulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RulesInclude<ExtArgs> | null
    /**
     * Filter which Rules to delete.
     */
    where: RulesWhereUniqueInput
  }


  /**
   * Rules deleteMany
   */
  export type RulesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rules to delete
     */
    where?: RulesWhereInput
  }


  /**
   * Rules.Condition
   */
  export type Rules$ConditionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Condition
     */
    select?: ConditionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConditionInclude<ExtArgs> | null
    where?: ConditionWhereInput
    orderBy?: ConditionOrderByWithRelationInput | ConditionOrderByWithRelationInput[]
    cursor?: ConditionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConditionScalarFieldEnum | ConditionScalarFieldEnum[]
  }


  /**
   * Rules without action
   */
  export type RulesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rules
     */
    select?: RulesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RulesInclude<ExtArgs> | null
  }



  /**
   * Model Values
   */

  export type AggregateValues = {
    _count: ValuesCountAggregateOutputType | null
    _avg: ValuesAvgAggregateOutputType | null
    _sum: ValuesSumAggregateOutputType | null
    _min: ValuesMinAggregateOutputType | null
    _max: ValuesMaxAggregateOutputType | null
  }

  export type ValuesAvgAggregateOutputType = {
    id: number | null
    id_variable: number | null
  }

  export type ValuesSumAggregateOutputType = {
    id: number | null
    id_variable: number | null
  }

  export type ValuesMinAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    id_variable: number | null
  }

  export type ValuesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    type: string | null
    id_variable: number | null
  }

  export type ValuesCountAggregateOutputType = {
    id: number
    name: number
    type: number
    id_variable: number
    _all: number
  }


  export type ValuesAvgAggregateInputType = {
    id?: true
    id_variable?: true
  }

  export type ValuesSumAggregateInputType = {
    id?: true
    id_variable?: true
  }

  export type ValuesMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    id_variable?: true
  }

  export type ValuesMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    id_variable?: true
  }

  export type ValuesCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    id_variable?: true
    _all?: true
  }

  export type ValuesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Values to aggregate.
     */
    where?: ValuesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Values to fetch.
     */
    orderBy?: ValuesOrderByWithRelationInput | ValuesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ValuesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Values from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Values.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Values
    **/
    _count?: true | ValuesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ValuesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ValuesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ValuesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ValuesMaxAggregateInputType
  }

  export type GetValuesAggregateType<T extends ValuesAggregateArgs> = {
        [P in keyof T & keyof AggregateValues]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateValues[P]>
      : GetScalarType<T[P], AggregateValues[P]>
  }




  export type ValuesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValuesWhereInput
    orderBy?: ValuesOrderByWithAggregationInput | ValuesOrderByWithAggregationInput[]
    by: ValuesScalarFieldEnum[] | ValuesScalarFieldEnum
    having?: ValuesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ValuesCountAggregateInputType | true
    _avg?: ValuesAvgAggregateInputType
    _sum?: ValuesSumAggregateInputType
    _min?: ValuesMinAggregateInputType
    _max?: ValuesMaxAggregateInputType
  }

  export type ValuesGroupByOutputType = {
    id: number
    name: string
    type: string
    id_variable: number
    _count: ValuesCountAggregateOutputType | null
    _avg: ValuesAvgAggregateOutputType | null
    _sum: ValuesSumAggregateOutputType | null
    _min: ValuesMinAggregateOutputType | null
    _max: ValuesMaxAggregateOutputType | null
  }

  type GetValuesGroupByPayload<T extends ValuesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ValuesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ValuesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ValuesGroupByOutputType[P]>
            : GetScalarType<T[P], ValuesGroupByOutputType[P]>
        }
      >
    >


  export type ValuesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    id_variable?: boolean
    Variable?: boolean | VariableDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["values"]>

  export type ValuesSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    id_variable?: boolean
  }

  export type ValuesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Variable?: boolean | VariableDefaultArgs<ExtArgs>
  }


  export type $ValuesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Values"
    objects: {
      Variable: Prisma.$VariablePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      type: string
      id_variable: number
    }, ExtArgs["result"]["values"]>
    composites: {}
  }


  type ValuesGetPayload<S extends boolean | null | undefined | ValuesDefaultArgs> = $Result.GetResult<Prisma.$ValuesPayload, S>

  type ValuesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ValuesFindManyArgs, 'select' | 'include'> & {
      select?: ValuesCountAggregateInputType | true
    }

  export interface ValuesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Values'], meta: { name: 'Values' } }
    /**
     * Find zero or one Values that matches the filter.
     * @param {ValuesFindUniqueArgs} args - Arguments to find a Values
     * @example
     * // Get one Values
     * const values = await prisma.values.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ValuesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ValuesFindUniqueArgs<ExtArgs>>
    ): Prisma__ValuesClient<$Result.GetResult<Prisma.$ValuesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Values that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ValuesFindUniqueOrThrowArgs} args - Arguments to find a Values
     * @example
     * // Get one Values
     * const values = await prisma.values.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ValuesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ValuesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ValuesClient<$Result.GetResult<Prisma.$ValuesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Values that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuesFindFirstArgs} args - Arguments to find a Values
     * @example
     * // Get one Values
     * const values = await prisma.values.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ValuesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ValuesFindFirstArgs<ExtArgs>>
    ): Prisma__ValuesClient<$Result.GetResult<Prisma.$ValuesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Values that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuesFindFirstOrThrowArgs} args - Arguments to find a Values
     * @example
     * // Get one Values
     * const values = await prisma.values.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ValuesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ValuesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ValuesClient<$Result.GetResult<Prisma.$ValuesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Values that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Values
     * const values = await prisma.values.findMany()
     * 
     * // Get first 10 Values
     * const values = await prisma.values.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const valuesWithIdOnly = await prisma.values.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ValuesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ValuesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValuesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Values.
     * @param {ValuesCreateArgs} args - Arguments to create a Values.
     * @example
     * // Create one Values
     * const Values = await prisma.values.create({
     *   data: {
     *     // ... data to create a Values
     *   }
     * })
     * 
    **/
    create<T extends ValuesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ValuesCreateArgs<ExtArgs>>
    ): Prisma__ValuesClient<$Result.GetResult<Prisma.$ValuesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Values.
     *     @param {ValuesCreateManyArgs} args - Arguments to create many Values.
     *     @example
     *     // Create many Values
     *     const values = await prisma.values.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ValuesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ValuesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Values.
     * @param {ValuesDeleteArgs} args - Arguments to delete one Values.
     * @example
     * // Delete one Values
     * const Values = await prisma.values.delete({
     *   where: {
     *     // ... filter to delete one Values
     *   }
     * })
     * 
    **/
    delete<T extends ValuesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ValuesDeleteArgs<ExtArgs>>
    ): Prisma__ValuesClient<$Result.GetResult<Prisma.$ValuesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Values.
     * @param {ValuesUpdateArgs} args - Arguments to update one Values.
     * @example
     * // Update one Values
     * const values = await prisma.values.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ValuesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ValuesUpdateArgs<ExtArgs>>
    ): Prisma__ValuesClient<$Result.GetResult<Prisma.$ValuesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Values.
     * @param {ValuesDeleteManyArgs} args - Arguments to filter Values to delete.
     * @example
     * // Delete a few Values
     * const { count } = await prisma.values.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ValuesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ValuesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Values.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Values
     * const values = await prisma.values.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ValuesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ValuesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Values.
     * @param {ValuesUpsertArgs} args - Arguments to update or create a Values.
     * @example
     * // Update or create a Values
     * const values = await prisma.values.upsert({
     *   create: {
     *     // ... data to create a Values
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Values we want to update
     *   }
     * })
    **/
    upsert<T extends ValuesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ValuesUpsertArgs<ExtArgs>>
    ): Prisma__ValuesClient<$Result.GetResult<Prisma.$ValuesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Values.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuesCountArgs} args - Arguments to filter Values to count.
     * @example
     * // Count the number of Values
     * const count = await prisma.values.count({
     *   where: {
     *     // ... the filter for the Values we want to count
     *   }
     * })
    **/
    count<T extends ValuesCountArgs>(
      args?: Subset<T, ValuesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ValuesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Values.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ValuesAggregateArgs>(args: Subset<T, ValuesAggregateArgs>): Prisma.PrismaPromise<GetValuesAggregateType<T>>

    /**
     * Group by Values.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ValuesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ValuesGroupByArgs['orderBy'] }
        : { orderBy?: ValuesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ValuesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetValuesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Values model
   */
  readonly fields: ValuesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Values.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ValuesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Variable<T extends VariableDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VariableDefaultArgs<ExtArgs>>): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Values model
   */ 
  interface ValuesFieldRefs {
    readonly id: FieldRef<"Values", 'Int'>
    readonly name: FieldRef<"Values", 'String'>
    readonly type: FieldRef<"Values", 'String'>
    readonly id_variable: FieldRef<"Values", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Values findUnique
   */
  export type ValuesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Values
     */
    select?: ValuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuesInclude<ExtArgs> | null
    /**
     * Filter, which Values to fetch.
     */
    where: ValuesWhereUniqueInput
  }


  /**
   * Values findUniqueOrThrow
   */
  export type ValuesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Values
     */
    select?: ValuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuesInclude<ExtArgs> | null
    /**
     * Filter, which Values to fetch.
     */
    where: ValuesWhereUniqueInput
  }


  /**
   * Values findFirst
   */
  export type ValuesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Values
     */
    select?: ValuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuesInclude<ExtArgs> | null
    /**
     * Filter, which Values to fetch.
     */
    where?: ValuesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Values to fetch.
     */
    orderBy?: ValuesOrderByWithRelationInput | ValuesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Values.
     */
    cursor?: ValuesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Values from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Values.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Values.
     */
    distinct?: ValuesScalarFieldEnum | ValuesScalarFieldEnum[]
  }


  /**
   * Values findFirstOrThrow
   */
  export type ValuesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Values
     */
    select?: ValuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuesInclude<ExtArgs> | null
    /**
     * Filter, which Values to fetch.
     */
    where?: ValuesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Values to fetch.
     */
    orderBy?: ValuesOrderByWithRelationInput | ValuesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Values.
     */
    cursor?: ValuesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Values from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Values.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Values.
     */
    distinct?: ValuesScalarFieldEnum | ValuesScalarFieldEnum[]
  }


  /**
   * Values findMany
   */
  export type ValuesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Values
     */
    select?: ValuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuesInclude<ExtArgs> | null
    /**
     * Filter, which Values to fetch.
     */
    where?: ValuesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Values to fetch.
     */
    orderBy?: ValuesOrderByWithRelationInput | ValuesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Values.
     */
    cursor?: ValuesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Values from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Values.
     */
    skip?: number
    distinct?: ValuesScalarFieldEnum | ValuesScalarFieldEnum[]
  }


  /**
   * Values create
   */
  export type ValuesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Values
     */
    select?: ValuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuesInclude<ExtArgs> | null
    /**
     * The data needed to create a Values.
     */
    data: XOR<ValuesCreateInput, ValuesUncheckedCreateInput>
  }


  /**
   * Values createMany
   */
  export type ValuesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Values.
     */
    data: ValuesCreateManyInput | ValuesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Values update
   */
  export type ValuesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Values
     */
    select?: ValuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuesInclude<ExtArgs> | null
    /**
     * The data needed to update a Values.
     */
    data: XOR<ValuesUpdateInput, ValuesUncheckedUpdateInput>
    /**
     * Choose, which Values to update.
     */
    where: ValuesWhereUniqueInput
  }


  /**
   * Values updateMany
   */
  export type ValuesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Values.
     */
    data: XOR<ValuesUpdateManyMutationInput, ValuesUncheckedUpdateManyInput>
    /**
     * Filter which Values to update
     */
    where?: ValuesWhereInput
  }


  /**
   * Values upsert
   */
  export type ValuesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Values
     */
    select?: ValuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuesInclude<ExtArgs> | null
    /**
     * The filter to search for the Values to update in case it exists.
     */
    where: ValuesWhereUniqueInput
    /**
     * In case the Values found by the `where` argument doesn't exist, create a new Values with this data.
     */
    create: XOR<ValuesCreateInput, ValuesUncheckedCreateInput>
    /**
     * In case the Values was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ValuesUpdateInput, ValuesUncheckedUpdateInput>
  }


  /**
   * Values delete
   */
  export type ValuesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Values
     */
    select?: ValuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuesInclude<ExtArgs> | null
    /**
     * Filter which Values to delete.
     */
    where: ValuesWhereUniqueInput
  }


  /**
   * Values deleteMany
   */
  export type ValuesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Values to delete
     */
    where?: ValuesWhereInput
  }


  /**
   * Values without action
   */
  export type ValuesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Values
     */
    select?: ValuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuesInclude<ExtArgs> | null
  }



  /**
   * Model Variable
   */

  export type AggregateVariable = {
    _count: VariableCountAggregateOutputType | null
    _avg: VariableAvgAggregateOutputType | null
    _sum: VariableSumAggregateOutputType | null
    _min: VariableMinAggregateOutputType | null
    _max: VariableMaxAggregateOutputType | null
  }

  export type VariableAvgAggregateOutputType = {
    id: number | null
  }

  export type VariableSumAggregateOutputType = {
    id: number | null
  }

  export type VariableMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type VariableMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type VariableCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type VariableAvgAggregateInputType = {
    id?: true
  }

  export type VariableSumAggregateInputType = {
    id?: true
  }

  export type VariableMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type VariableMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type VariableCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type VariableAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Variable to aggregate.
     */
    where?: VariableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variables to fetch.
     */
    orderBy?: VariableOrderByWithRelationInput | VariableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VariableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Variables
    **/
    _count?: true | VariableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VariableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VariableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VariableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VariableMaxAggregateInputType
  }

  export type GetVariableAggregateType<T extends VariableAggregateArgs> = {
        [P in keyof T & keyof AggregateVariable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVariable[P]>
      : GetScalarType<T[P], AggregateVariable[P]>
  }




  export type VariableGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VariableWhereInput
    orderBy?: VariableOrderByWithAggregationInput | VariableOrderByWithAggregationInput[]
    by: VariableScalarFieldEnum[] | VariableScalarFieldEnum
    having?: VariableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VariableCountAggregateInputType | true
    _avg?: VariableAvgAggregateInputType
    _sum?: VariableSumAggregateInputType
    _min?: VariableMinAggregateInputType
    _max?: VariableMaxAggregateInputType
  }

  export type VariableGroupByOutputType = {
    id: number
    name: string
    _count: VariableCountAggregateOutputType | null
    _avg: VariableAvgAggregateOutputType | null
    _sum: VariableSumAggregateOutputType | null
    _min: VariableMinAggregateOutputType | null
    _max: VariableMaxAggregateOutputType | null
  }

  type GetVariableGroupByPayload<T extends VariableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VariableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VariableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VariableGroupByOutputType[P]>
            : GetScalarType<T[P], VariableGroupByOutputType[P]>
        }
      >
    >


  export type VariableSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    Values?: boolean | Variable$ValuesArgs<ExtArgs>
    _count?: boolean | VariableCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["variable"]>

  export type VariableSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type VariableInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Values?: boolean | Variable$ValuesArgs<ExtArgs>
    _count?: boolean | VariableCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $VariablePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Variable"
    objects: {
      Values: Prisma.$ValuesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["variable"]>
    composites: {}
  }


  type VariableGetPayload<S extends boolean | null | undefined | VariableDefaultArgs> = $Result.GetResult<Prisma.$VariablePayload, S>

  type VariableCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VariableFindManyArgs, 'select' | 'include'> & {
      select?: VariableCountAggregateInputType | true
    }

  export interface VariableDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Variable'], meta: { name: 'Variable' } }
    /**
     * Find zero or one Variable that matches the filter.
     * @param {VariableFindUniqueArgs} args - Arguments to find a Variable
     * @example
     * // Get one Variable
     * const variable = await prisma.variable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VariableFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VariableFindUniqueArgs<ExtArgs>>
    ): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Variable that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VariableFindUniqueOrThrowArgs} args - Arguments to find a Variable
     * @example
     * // Get one Variable
     * const variable = await prisma.variable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VariableFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VariableFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Variable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableFindFirstArgs} args - Arguments to find a Variable
     * @example
     * // Get one Variable
     * const variable = await prisma.variable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VariableFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VariableFindFirstArgs<ExtArgs>>
    ): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Variable that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableFindFirstOrThrowArgs} args - Arguments to find a Variable
     * @example
     * // Get one Variable
     * const variable = await prisma.variable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VariableFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VariableFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Variables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Variables
     * const variables = await prisma.variable.findMany()
     * 
     * // Get first 10 Variables
     * const variables = await prisma.variable.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const variableWithIdOnly = await prisma.variable.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VariableFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VariableFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Variable.
     * @param {VariableCreateArgs} args - Arguments to create a Variable.
     * @example
     * // Create one Variable
     * const Variable = await prisma.variable.create({
     *   data: {
     *     // ... data to create a Variable
     *   }
     * })
     * 
    **/
    create<T extends VariableCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VariableCreateArgs<ExtArgs>>
    ): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Variables.
     *     @param {VariableCreateManyArgs} args - Arguments to create many Variables.
     *     @example
     *     // Create many Variables
     *     const variable = await prisma.variable.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VariableCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VariableCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Variable.
     * @param {VariableDeleteArgs} args - Arguments to delete one Variable.
     * @example
     * // Delete one Variable
     * const Variable = await prisma.variable.delete({
     *   where: {
     *     // ... filter to delete one Variable
     *   }
     * })
     * 
    **/
    delete<T extends VariableDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VariableDeleteArgs<ExtArgs>>
    ): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Variable.
     * @param {VariableUpdateArgs} args - Arguments to update one Variable.
     * @example
     * // Update one Variable
     * const variable = await prisma.variable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VariableUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VariableUpdateArgs<ExtArgs>>
    ): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Variables.
     * @param {VariableDeleteManyArgs} args - Arguments to filter Variables to delete.
     * @example
     * // Delete a few Variables
     * const { count } = await prisma.variable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VariableDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VariableDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Variables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Variables
     * const variable = await prisma.variable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VariableUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VariableUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Variable.
     * @param {VariableUpsertArgs} args - Arguments to update or create a Variable.
     * @example
     * // Update or create a Variable
     * const variable = await prisma.variable.upsert({
     *   create: {
     *     // ... data to create a Variable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Variable we want to update
     *   }
     * })
    **/
    upsert<T extends VariableUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VariableUpsertArgs<ExtArgs>>
    ): Prisma__VariableClient<$Result.GetResult<Prisma.$VariablePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Variables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableCountArgs} args - Arguments to filter Variables to count.
     * @example
     * // Count the number of Variables
     * const count = await prisma.variable.count({
     *   where: {
     *     // ... the filter for the Variables we want to count
     *   }
     * })
    **/
    count<T extends VariableCountArgs>(
      args?: Subset<T, VariableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VariableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Variable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VariableAggregateArgs>(args: Subset<T, VariableAggregateArgs>): Prisma.PrismaPromise<GetVariableAggregateType<T>>

    /**
     * Group by Variable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VariableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VariableGroupByArgs['orderBy'] }
        : { orderBy?: VariableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VariableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVariableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Variable model
   */
  readonly fields: VariableFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Variable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VariableClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Values<T extends Variable$ValuesArgs<ExtArgs> = {}>(args?: Subset<T, Variable$ValuesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValuesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Variable model
   */ 
  interface VariableFieldRefs {
    readonly id: FieldRef<"Variable", 'Int'>
    readonly name: FieldRef<"Variable", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Variable findUnique
   */
  export type VariableFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * Filter, which Variable to fetch.
     */
    where: VariableWhereUniqueInput
  }


  /**
   * Variable findUniqueOrThrow
   */
  export type VariableFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * Filter, which Variable to fetch.
     */
    where: VariableWhereUniqueInput
  }


  /**
   * Variable findFirst
   */
  export type VariableFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * Filter, which Variable to fetch.
     */
    where?: VariableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variables to fetch.
     */
    orderBy?: VariableOrderByWithRelationInput | VariableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Variables.
     */
    cursor?: VariableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Variables.
     */
    distinct?: VariableScalarFieldEnum | VariableScalarFieldEnum[]
  }


  /**
   * Variable findFirstOrThrow
   */
  export type VariableFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * Filter, which Variable to fetch.
     */
    where?: VariableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variables to fetch.
     */
    orderBy?: VariableOrderByWithRelationInput | VariableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Variables.
     */
    cursor?: VariableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Variables.
     */
    distinct?: VariableScalarFieldEnum | VariableScalarFieldEnum[]
  }


  /**
   * Variable findMany
   */
  export type VariableFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * Filter, which Variables to fetch.
     */
    where?: VariableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Variables to fetch.
     */
    orderBy?: VariableOrderByWithRelationInput | VariableOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Variables.
     */
    cursor?: VariableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Variables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Variables.
     */
    skip?: number
    distinct?: VariableScalarFieldEnum | VariableScalarFieldEnum[]
  }


  /**
   * Variable create
   */
  export type VariableCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * The data needed to create a Variable.
     */
    data: XOR<VariableCreateInput, VariableUncheckedCreateInput>
  }


  /**
   * Variable createMany
   */
  export type VariableCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Variables.
     */
    data: VariableCreateManyInput | VariableCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Variable update
   */
  export type VariableUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * The data needed to update a Variable.
     */
    data: XOR<VariableUpdateInput, VariableUncheckedUpdateInput>
    /**
     * Choose, which Variable to update.
     */
    where: VariableWhereUniqueInput
  }


  /**
   * Variable updateMany
   */
  export type VariableUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Variables.
     */
    data: XOR<VariableUpdateManyMutationInput, VariableUncheckedUpdateManyInput>
    /**
     * Filter which Variables to update
     */
    where?: VariableWhereInput
  }


  /**
   * Variable upsert
   */
  export type VariableUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * The filter to search for the Variable to update in case it exists.
     */
    where: VariableWhereUniqueInput
    /**
     * In case the Variable found by the `where` argument doesn't exist, create a new Variable with this data.
     */
    create: XOR<VariableCreateInput, VariableUncheckedCreateInput>
    /**
     * In case the Variable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VariableUpdateInput, VariableUncheckedUpdateInput>
  }


  /**
   * Variable delete
   */
  export type VariableDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VariableInclude<ExtArgs> | null
    /**
     * Filter which Variable to delete.
     */
    where: VariableWhereUniqueInput
  }


  /**
   * Variable deleteMany
   */
  export type VariableDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Variables to delete
     */
    where?: VariableWhereInput
  }


  /**
   * Variable.Values
   */
  export type Variable$ValuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Values
     */
    select?: ValuesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ValuesInclude<ExtArgs> | null
    where?: ValuesWhereInput
    orderBy?: ValuesOrderByWithRelationInput | ValuesOrderByWithRelationInput[]
    cursor?: ValuesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValuesScalarFieldEnum | ValuesScalarFieldEnum[]
  }


  /**
   * Variable without action
   */
  export type VariableDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Variable
     */
    select?: VariableSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VariableInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ConditionScalarFieldEnum: {
    id: 'id',
    operator: 'operator',
    value: 'value',
    id_variable: 'id_variable',
    id_rule: 'id_rule',
    type: 'type'
  };

  export type ConditionScalarFieldEnum = (typeof ConditionScalarFieldEnum)[keyof typeof ConditionScalarFieldEnum]


  export const RulesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RulesScalarFieldEnum = (typeof RulesScalarFieldEnum)[keyof typeof RulesScalarFieldEnum]


  export const ValuesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    id_variable: 'id_variable'
  };

  export type ValuesScalarFieldEnum = (typeof ValuesScalarFieldEnum)[keyof typeof ValuesScalarFieldEnum]


  export const VariableScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type VariableScalarFieldEnum = (typeof VariableScalarFieldEnum)[keyof typeof VariableScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'conditions_type'
   */
  export type Enumconditions_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'conditions_type'>
    


  /**
   * Reference to a field of type 'conditions_type[]'
   */
  export type ListEnumconditions_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'conditions_type[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ConditionWhereInput = {
    AND?: ConditionWhereInput | ConditionWhereInput[]
    OR?: ConditionWhereInput[]
    NOT?: ConditionWhereInput | ConditionWhereInput[]
    id?: IntFilter<"Condition"> | number
    operator?: StringFilter<"Condition"> | string
    value?: StringFilter<"Condition"> | string
    id_variable?: IntFilter<"Condition"> | number
    id_rule?: IntFilter<"Condition"> | number
    type?: Enumconditions_typeFilter<"Condition"> | $Enums.conditions_type
    Rules?: XOR<RulesRelationFilter, RulesWhereInput>
  }

  export type ConditionOrderByWithRelationInput = {
    id?: SortOrder
    operator?: SortOrder
    value?: SortOrder
    id_variable?: SortOrder
    id_rule?: SortOrder
    type?: SortOrder
    Rules?: RulesOrderByWithRelationInput
  }

  export type ConditionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ConditionWhereInput | ConditionWhereInput[]
    OR?: ConditionWhereInput[]
    NOT?: ConditionWhereInput | ConditionWhereInput[]
    operator?: StringFilter<"Condition"> | string
    value?: StringFilter<"Condition"> | string
    id_variable?: IntFilter<"Condition"> | number
    id_rule?: IntFilter<"Condition"> | number
    type?: Enumconditions_typeFilter<"Condition"> | $Enums.conditions_type
    Rules?: XOR<RulesRelationFilter, RulesWhereInput>
  }, "id">

  export type ConditionOrderByWithAggregationInput = {
    id?: SortOrder
    operator?: SortOrder
    value?: SortOrder
    id_variable?: SortOrder
    id_rule?: SortOrder
    type?: SortOrder
    _count?: ConditionCountOrderByAggregateInput
    _avg?: ConditionAvgOrderByAggregateInput
    _max?: ConditionMaxOrderByAggregateInput
    _min?: ConditionMinOrderByAggregateInput
    _sum?: ConditionSumOrderByAggregateInput
  }

  export type ConditionScalarWhereWithAggregatesInput = {
    AND?: ConditionScalarWhereWithAggregatesInput | ConditionScalarWhereWithAggregatesInput[]
    OR?: ConditionScalarWhereWithAggregatesInput[]
    NOT?: ConditionScalarWhereWithAggregatesInput | ConditionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Condition"> | number
    operator?: StringWithAggregatesFilter<"Condition"> | string
    value?: StringWithAggregatesFilter<"Condition"> | string
    id_variable?: IntWithAggregatesFilter<"Condition"> | number
    id_rule?: IntWithAggregatesFilter<"Condition"> | number
    type?: Enumconditions_typeWithAggregatesFilter<"Condition"> | $Enums.conditions_type
  }

  export type RulesWhereInput = {
    AND?: RulesWhereInput | RulesWhereInput[]
    OR?: RulesWhereInput[]
    NOT?: RulesWhereInput | RulesWhereInput[]
    id?: IntFilter<"Rules"> | number
    name?: StringFilter<"Rules"> | string
    Condition?: ConditionListRelationFilter
  }

  export type RulesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Condition?: ConditionOrderByRelationAggregateInput
  }

  export type RulesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RulesWhereInput | RulesWhereInput[]
    OR?: RulesWhereInput[]
    NOT?: RulesWhereInput | RulesWhereInput[]
    name?: StringFilter<"Rules"> | string
    Condition?: ConditionListRelationFilter
  }, "id">

  export type RulesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: RulesCountOrderByAggregateInput
    _avg?: RulesAvgOrderByAggregateInput
    _max?: RulesMaxOrderByAggregateInput
    _min?: RulesMinOrderByAggregateInput
    _sum?: RulesSumOrderByAggregateInput
  }

  export type RulesScalarWhereWithAggregatesInput = {
    AND?: RulesScalarWhereWithAggregatesInput | RulesScalarWhereWithAggregatesInput[]
    OR?: RulesScalarWhereWithAggregatesInput[]
    NOT?: RulesScalarWhereWithAggregatesInput | RulesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rules"> | number
    name?: StringWithAggregatesFilter<"Rules"> | string
  }

  export type ValuesWhereInput = {
    AND?: ValuesWhereInput | ValuesWhereInput[]
    OR?: ValuesWhereInput[]
    NOT?: ValuesWhereInput | ValuesWhereInput[]
    id?: IntFilter<"Values"> | number
    name?: StringFilter<"Values"> | string
    type?: StringFilter<"Values"> | string
    id_variable?: IntFilter<"Values"> | number
    Variable?: XOR<VariableRelationFilter, VariableWhereInput>
  }

  export type ValuesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    id_variable?: SortOrder
    Variable?: VariableOrderByWithRelationInput
  }

  export type ValuesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ValuesWhereInput | ValuesWhereInput[]
    OR?: ValuesWhereInput[]
    NOT?: ValuesWhereInput | ValuesWhereInput[]
    name?: StringFilter<"Values"> | string
    type?: StringFilter<"Values"> | string
    id_variable?: IntFilter<"Values"> | number
    Variable?: XOR<VariableRelationFilter, VariableWhereInput>
  }, "id">

  export type ValuesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    id_variable?: SortOrder
    _count?: ValuesCountOrderByAggregateInput
    _avg?: ValuesAvgOrderByAggregateInput
    _max?: ValuesMaxOrderByAggregateInput
    _min?: ValuesMinOrderByAggregateInput
    _sum?: ValuesSumOrderByAggregateInput
  }

  export type ValuesScalarWhereWithAggregatesInput = {
    AND?: ValuesScalarWhereWithAggregatesInput | ValuesScalarWhereWithAggregatesInput[]
    OR?: ValuesScalarWhereWithAggregatesInput[]
    NOT?: ValuesScalarWhereWithAggregatesInput | ValuesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Values"> | number
    name?: StringWithAggregatesFilter<"Values"> | string
    type?: StringWithAggregatesFilter<"Values"> | string
    id_variable?: IntWithAggregatesFilter<"Values"> | number
  }

  export type VariableWhereInput = {
    AND?: VariableWhereInput | VariableWhereInput[]
    OR?: VariableWhereInput[]
    NOT?: VariableWhereInput | VariableWhereInput[]
    id?: IntFilter<"Variable"> | number
    name?: StringFilter<"Variable"> | string
    Values?: ValuesListRelationFilter
  }

  export type VariableOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    Values?: ValuesOrderByRelationAggregateInput
  }

  export type VariableWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VariableWhereInput | VariableWhereInput[]
    OR?: VariableWhereInput[]
    NOT?: VariableWhereInput | VariableWhereInput[]
    name?: StringFilter<"Variable"> | string
    Values?: ValuesListRelationFilter
  }, "id">

  export type VariableOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: VariableCountOrderByAggregateInput
    _avg?: VariableAvgOrderByAggregateInput
    _max?: VariableMaxOrderByAggregateInput
    _min?: VariableMinOrderByAggregateInput
    _sum?: VariableSumOrderByAggregateInput
  }

  export type VariableScalarWhereWithAggregatesInput = {
    AND?: VariableScalarWhereWithAggregatesInput | VariableScalarWhereWithAggregatesInput[]
    OR?: VariableScalarWhereWithAggregatesInput[]
    NOT?: VariableScalarWhereWithAggregatesInput | VariableScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Variable"> | number
    name?: StringWithAggregatesFilter<"Variable"> | string
  }

  export type ConditionCreateInput = {
    operator: string
    value: string
    id_variable: number
    type: $Enums.conditions_type
    Rules: RulesCreateNestedOneWithoutConditionInput
  }

  export type ConditionUncheckedCreateInput = {
    id?: number
    operator: string
    value: string
    id_variable: number
    id_rule: number
    type: $Enums.conditions_type
  }

  export type ConditionUpdateInput = {
    operator?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    id_variable?: IntFieldUpdateOperationsInput | number
    type?: Enumconditions_typeFieldUpdateOperationsInput | $Enums.conditions_type
    Rules?: RulesUpdateOneRequiredWithoutConditionNestedInput
  }

  export type ConditionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    operator?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    id_variable?: IntFieldUpdateOperationsInput | number
    id_rule?: IntFieldUpdateOperationsInput | number
    type?: Enumconditions_typeFieldUpdateOperationsInput | $Enums.conditions_type
  }

  export type ConditionCreateManyInput = {
    id?: number
    operator: string
    value: string
    id_variable: number
    id_rule: number
    type: $Enums.conditions_type
  }

  export type ConditionUpdateManyMutationInput = {
    operator?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    id_variable?: IntFieldUpdateOperationsInput | number
    type?: Enumconditions_typeFieldUpdateOperationsInput | $Enums.conditions_type
  }

  export type ConditionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    operator?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    id_variable?: IntFieldUpdateOperationsInput | number
    id_rule?: IntFieldUpdateOperationsInput | number
    type?: Enumconditions_typeFieldUpdateOperationsInput | $Enums.conditions_type
  }

  export type RulesCreateInput = {
    name: string
    Condition?: ConditionCreateNestedManyWithoutRulesInput
  }

  export type RulesUncheckedCreateInput = {
    id?: number
    name: string
    Condition?: ConditionUncheckedCreateNestedManyWithoutRulesInput
  }

  export type RulesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Condition?: ConditionUpdateManyWithoutRulesNestedInput
  }

  export type RulesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Condition?: ConditionUncheckedUpdateManyWithoutRulesNestedInput
  }

  export type RulesCreateManyInput = {
    id?: number
    name: string
  }

  export type RulesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RulesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ValuesCreateInput = {
    name: string
    type: string
    Variable: VariableCreateNestedOneWithoutValuesInput
  }

  export type ValuesUncheckedCreateInput = {
    id?: number
    name: string
    type: string
    id_variable: number
  }

  export type ValuesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    Variable?: VariableUpdateOneRequiredWithoutValuesNestedInput
  }

  export type ValuesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    id_variable?: IntFieldUpdateOperationsInput | number
  }

  export type ValuesCreateManyInput = {
    id?: number
    name: string
    type: string
    id_variable: number
  }

  export type ValuesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type ValuesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    id_variable?: IntFieldUpdateOperationsInput | number
  }

  export type VariableCreateInput = {
    name: string
    Values?: ValuesCreateNestedManyWithoutVariableInput
  }

  export type VariableUncheckedCreateInput = {
    id?: number
    name: string
    Values?: ValuesUncheckedCreateNestedManyWithoutVariableInput
  }

  export type VariableUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    Values?: ValuesUpdateManyWithoutVariableNestedInput
  }

  export type VariableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    Values?: ValuesUncheckedUpdateManyWithoutVariableNestedInput
  }

  export type VariableCreateManyInput = {
    id?: number
    name: string
  }

  export type VariableUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type VariableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Enumconditions_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.conditions_type | Enumconditions_typeFieldRefInput<$PrismaModel>
    in?: $Enums.conditions_type[] | ListEnumconditions_typeFieldRefInput<$PrismaModel>
    notIn?: $Enums.conditions_type[] | ListEnumconditions_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumconditions_typeFilter<$PrismaModel> | $Enums.conditions_type
  }

  export type RulesRelationFilter = {
    is?: RulesWhereInput
    isNot?: RulesWhereInput
  }

  export type ConditionCountOrderByAggregateInput = {
    id?: SortOrder
    operator?: SortOrder
    value?: SortOrder
    id_variable?: SortOrder
    id_rule?: SortOrder
    type?: SortOrder
  }

  export type ConditionAvgOrderByAggregateInput = {
    id?: SortOrder
    id_variable?: SortOrder
    id_rule?: SortOrder
  }

  export type ConditionMaxOrderByAggregateInput = {
    id?: SortOrder
    operator?: SortOrder
    value?: SortOrder
    id_variable?: SortOrder
    id_rule?: SortOrder
    type?: SortOrder
  }

  export type ConditionMinOrderByAggregateInput = {
    id?: SortOrder
    operator?: SortOrder
    value?: SortOrder
    id_variable?: SortOrder
    id_rule?: SortOrder
    type?: SortOrder
  }

  export type ConditionSumOrderByAggregateInput = {
    id?: SortOrder
    id_variable?: SortOrder
    id_rule?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type Enumconditions_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.conditions_type | Enumconditions_typeFieldRefInput<$PrismaModel>
    in?: $Enums.conditions_type[] | ListEnumconditions_typeFieldRefInput<$PrismaModel>
    notIn?: $Enums.conditions_type[] | ListEnumconditions_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumconditions_typeWithAggregatesFilter<$PrismaModel> | $Enums.conditions_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumconditions_typeFilter<$PrismaModel>
    _max?: NestedEnumconditions_typeFilter<$PrismaModel>
  }

  export type ConditionListRelationFilter = {
    every?: ConditionWhereInput
    some?: ConditionWhereInput
    none?: ConditionWhereInput
  }

  export type ConditionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RulesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RulesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RulesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RulesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RulesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VariableRelationFilter = {
    is?: VariableWhereInput
    isNot?: VariableWhereInput
  }

  export type ValuesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    id_variable?: SortOrder
  }

  export type ValuesAvgOrderByAggregateInput = {
    id?: SortOrder
    id_variable?: SortOrder
  }

  export type ValuesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    id_variable?: SortOrder
  }

  export type ValuesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    id_variable?: SortOrder
  }

  export type ValuesSumOrderByAggregateInput = {
    id?: SortOrder
    id_variable?: SortOrder
  }

  export type ValuesListRelationFilter = {
    every?: ValuesWhereInput
    some?: ValuesWhereInput
    none?: ValuesWhereInput
  }

  export type ValuesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VariableCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type VariableAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VariableMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type VariableMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type VariableSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RulesCreateNestedOneWithoutConditionInput = {
    create?: XOR<RulesCreateWithoutConditionInput, RulesUncheckedCreateWithoutConditionInput>
    connectOrCreate?: RulesCreateOrConnectWithoutConditionInput
    connect?: RulesWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Enumconditions_typeFieldUpdateOperationsInput = {
    set?: $Enums.conditions_type
  }

  export type RulesUpdateOneRequiredWithoutConditionNestedInput = {
    create?: XOR<RulesCreateWithoutConditionInput, RulesUncheckedCreateWithoutConditionInput>
    connectOrCreate?: RulesCreateOrConnectWithoutConditionInput
    upsert?: RulesUpsertWithoutConditionInput
    connect?: RulesWhereUniqueInput
    update?: XOR<XOR<RulesUpdateToOneWithWhereWithoutConditionInput, RulesUpdateWithoutConditionInput>, RulesUncheckedUpdateWithoutConditionInput>
  }

  export type ConditionCreateNestedManyWithoutRulesInput = {
    create?: XOR<ConditionCreateWithoutRulesInput, ConditionUncheckedCreateWithoutRulesInput> | ConditionCreateWithoutRulesInput[] | ConditionUncheckedCreateWithoutRulesInput[]
    connectOrCreate?: ConditionCreateOrConnectWithoutRulesInput | ConditionCreateOrConnectWithoutRulesInput[]
    createMany?: ConditionCreateManyRulesInputEnvelope
    connect?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
  }

  export type ConditionUncheckedCreateNestedManyWithoutRulesInput = {
    create?: XOR<ConditionCreateWithoutRulesInput, ConditionUncheckedCreateWithoutRulesInput> | ConditionCreateWithoutRulesInput[] | ConditionUncheckedCreateWithoutRulesInput[]
    connectOrCreate?: ConditionCreateOrConnectWithoutRulesInput | ConditionCreateOrConnectWithoutRulesInput[]
    createMany?: ConditionCreateManyRulesInputEnvelope
    connect?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
  }

  export type ConditionUpdateManyWithoutRulesNestedInput = {
    create?: XOR<ConditionCreateWithoutRulesInput, ConditionUncheckedCreateWithoutRulesInput> | ConditionCreateWithoutRulesInput[] | ConditionUncheckedCreateWithoutRulesInput[]
    connectOrCreate?: ConditionCreateOrConnectWithoutRulesInput | ConditionCreateOrConnectWithoutRulesInput[]
    upsert?: ConditionUpsertWithWhereUniqueWithoutRulesInput | ConditionUpsertWithWhereUniqueWithoutRulesInput[]
    createMany?: ConditionCreateManyRulesInputEnvelope
    set?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    disconnect?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    delete?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    connect?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    update?: ConditionUpdateWithWhereUniqueWithoutRulesInput | ConditionUpdateWithWhereUniqueWithoutRulesInput[]
    updateMany?: ConditionUpdateManyWithWhereWithoutRulesInput | ConditionUpdateManyWithWhereWithoutRulesInput[]
    deleteMany?: ConditionScalarWhereInput | ConditionScalarWhereInput[]
  }

  export type ConditionUncheckedUpdateManyWithoutRulesNestedInput = {
    create?: XOR<ConditionCreateWithoutRulesInput, ConditionUncheckedCreateWithoutRulesInput> | ConditionCreateWithoutRulesInput[] | ConditionUncheckedCreateWithoutRulesInput[]
    connectOrCreate?: ConditionCreateOrConnectWithoutRulesInput | ConditionCreateOrConnectWithoutRulesInput[]
    upsert?: ConditionUpsertWithWhereUniqueWithoutRulesInput | ConditionUpsertWithWhereUniqueWithoutRulesInput[]
    createMany?: ConditionCreateManyRulesInputEnvelope
    set?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    disconnect?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    delete?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    connect?: ConditionWhereUniqueInput | ConditionWhereUniqueInput[]
    update?: ConditionUpdateWithWhereUniqueWithoutRulesInput | ConditionUpdateWithWhereUniqueWithoutRulesInput[]
    updateMany?: ConditionUpdateManyWithWhereWithoutRulesInput | ConditionUpdateManyWithWhereWithoutRulesInput[]
    deleteMany?: ConditionScalarWhereInput | ConditionScalarWhereInput[]
  }

  export type VariableCreateNestedOneWithoutValuesInput = {
    create?: XOR<VariableCreateWithoutValuesInput, VariableUncheckedCreateWithoutValuesInput>
    connectOrCreate?: VariableCreateOrConnectWithoutValuesInput
    connect?: VariableWhereUniqueInput
  }

  export type VariableUpdateOneRequiredWithoutValuesNestedInput = {
    create?: XOR<VariableCreateWithoutValuesInput, VariableUncheckedCreateWithoutValuesInput>
    connectOrCreate?: VariableCreateOrConnectWithoutValuesInput
    upsert?: VariableUpsertWithoutValuesInput
    connect?: VariableWhereUniqueInput
    update?: XOR<XOR<VariableUpdateToOneWithWhereWithoutValuesInput, VariableUpdateWithoutValuesInput>, VariableUncheckedUpdateWithoutValuesInput>
  }

  export type ValuesCreateNestedManyWithoutVariableInput = {
    create?: XOR<ValuesCreateWithoutVariableInput, ValuesUncheckedCreateWithoutVariableInput> | ValuesCreateWithoutVariableInput[] | ValuesUncheckedCreateWithoutVariableInput[]
    connectOrCreate?: ValuesCreateOrConnectWithoutVariableInput | ValuesCreateOrConnectWithoutVariableInput[]
    createMany?: ValuesCreateManyVariableInputEnvelope
    connect?: ValuesWhereUniqueInput | ValuesWhereUniqueInput[]
  }

  export type ValuesUncheckedCreateNestedManyWithoutVariableInput = {
    create?: XOR<ValuesCreateWithoutVariableInput, ValuesUncheckedCreateWithoutVariableInput> | ValuesCreateWithoutVariableInput[] | ValuesUncheckedCreateWithoutVariableInput[]
    connectOrCreate?: ValuesCreateOrConnectWithoutVariableInput | ValuesCreateOrConnectWithoutVariableInput[]
    createMany?: ValuesCreateManyVariableInputEnvelope
    connect?: ValuesWhereUniqueInput | ValuesWhereUniqueInput[]
  }

  export type ValuesUpdateManyWithoutVariableNestedInput = {
    create?: XOR<ValuesCreateWithoutVariableInput, ValuesUncheckedCreateWithoutVariableInput> | ValuesCreateWithoutVariableInput[] | ValuesUncheckedCreateWithoutVariableInput[]
    connectOrCreate?: ValuesCreateOrConnectWithoutVariableInput | ValuesCreateOrConnectWithoutVariableInput[]
    upsert?: ValuesUpsertWithWhereUniqueWithoutVariableInput | ValuesUpsertWithWhereUniqueWithoutVariableInput[]
    createMany?: ValuesCreateManyVariableInputEnvelope
    set?: ValuesWhereUniqueInput | ValuesWhereUniqueInput[]
    disconnect?: ValuesWhereUniqueInput | ValuesWhereUniqueInput[]
    delete?: ValuesWhereUniqueInput | ValuesWhereUniqueInput[]
    connect?: ValuesWhereUniqueInput | ValuesWhereUniqueInput[]
    update?: ValuesUpdateWithWhereUniqueWithoutVariableInput | ValuesUpdateWithWhereUniqueWithoutVariableInput[]
    updateMany?: ValuesUpdateManyWithWhereWithoutVariableInput | ValuesUpdateManyWithWhereWithoutVariableInput[]
    deleteMany?: ValuesScalarWhereInput | ValuesScalarWhereInput[]
  }

  export type ValuesUncheckedUpdateManyWithoutVariableNestedInput = {
    create?: XOR<ValuesCreateWithoutVariableInput, ValuesUncheckedCreateWithoutVariableInput> | ValuesCreateWithoutVariableInput[] | ValuesUncheckedCreateWithoutVariableInput[]
    connectOrCreate?: ValuesCreateOrConnectWithoutVariableInput | ValuesCreateOrConnectWithoutVariableInput[]
    upsert?: ValuesUpsertWithWhereUniqueWithoutVariableInput | ValuesUpsertWithWhereUniqueWithoutVariableInput[]
    createMany?: ValuesCreateManyVariableInputEnvelope
    set?: ValuesWhereUniqueInput | ValuesWhereUniqueInput[]
    disconnect?: ValuesWhereUniqueInput | ValuesWhereUniqueInput[]
    delete?: ValuesWhereUniqueInput | ValuesWhereUniqueInput[]
    connect?: ValuesWhereUniqueInput | ValuesWhereUniqueInput[]
    update?: ValuesUpdateWithWhereUniqueWithoutVariableInput | ValuesUpdateWithWhereUniqueWithoutVariableInput[]
    updateMany?: ValuesUpdateManyWithWhereWithoutVariableInput | ValuesUpdateManyWithWhereWithoutVariableInput[]
    deleteMany?: ValuesScalarWhereInput | ValuesScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumconditions_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.conditions_type | Enumconditions_typeFieldRefInput<$PrismaModel>
    in?: $Enums.conditions_type[] | ListEnumconditions_typeFieldRefInput<$PrismaModel>
    notIn?: $Enums.conditions_type[] | ListEnumconditions_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumconditions_typeFilter<$PrismaModel> | $Enums.conditions_type
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumconditions_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.conditions_type | Enumconditions_typeFieldRefInput<$PrismaModel>
    in?: $Enums.conditions_type[] | ListEnumconditions_typeFieldRefInput<$PrismaModel>
    notIn?: $Enums.conditions_type[] | ListEnumconditions_typeFieldRefInput<$PrismaModel>
    not?: NestedEnumconditions_typeWithAggregatesFilter<$PrismaModel> | $Enums.conditions_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumconditions_typeFilter<$PrismaModel>
    _max?: NestedEnumconditions_typeFilter<$PrismaModel>
  }

  export type RulesCreateWithoutConditionInput = {
    name: string
  }

  export type RulesUncheckedCreateWithoutConditionInput = {
    id?: number
    name: string
  }

  export type RulesCreateOrConnectWithoutConditionInput = {
    where: RulesWhereUniqueInput
    create: XOR<RulesCreateWithoutConditionInput, RulesUncheckedCreateWithoutConditionInput>
  }

  export type RulesUpsertWithoutConditionInput = {
    update: XOR<RulesUpdateWithoutConditionInput, RulesUncheckedUpdateWithoutConditionInput>
    create: XOR<RulesCreateWithoutConditionInput, RulesUncheckedCreateWithoutConditionInput>
    where?: RulesWhereInput
  }

  export type RulesUpdateToOneWithWhereWithoutConditionInput = {
    where?: RulesWhereInput
    data: XOR<RulesUpdateWithoutConditionInput, RulesUncheckedUpdateWithoutConditionInput>
  }

  export type RulesUpdateWithoutConditionInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RulesUncheckedUpdateWithoutConditionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ConditionCreateWithoutRulesInput = {
    operator: string
    value: string
    id_variable: number
    type: $Enums.conditions_type
  }

  export type ConditionUncheckedCreateWithoutRulesInput = {
    id?: number
    operator: string
    value: string
    id_variable: number
    type: $Enums.conditions_type
  }

  export type ConditionCreateOrConnectWithoutRulesInput = {
    where: ConditionWhereUniqueInput
    create: XOR<ConditionCreateWithoutRulesInput, ConditionUncheckedCreateWithoutRulesInput>
  }

  export type ConditionCreateManyRulesInputEnvelope = {
    data: ConditionCreateManyRulesInput | ConditionCreateManyRulesInput[]
    skipDuplicates?: boolean
  }

  export type ConditionUpsertWithWhereUniqueWithoutRulesInput = {
    where: ConditionWhereUniqueInput
    update: XOR<ConditionUpdateWithoutRulesInput, ConditionUncheckedUpdateWithoutRulesInput>
    create: XOR<ConditionCreateWithoutRulesInput, ConditionUncheckedCreateWithoutRulesInput>
  }

  export type ConditionUpdateWithWhereUniqueWithoutRulesInput = {
    where: ConditionWhereUniqueInput
    data: XOR<ConditionUpdateWithoutRulesInput, ConditionUncheckedUpdateWithoutRulesInput>
  }

  export type ConditionUpdateManyWithWhereWithoutRulesInput = {
    where: ConditionScalarWhereInput
    data: XOR<ConditionUpdateManyMutationInput, ConditionUncheckedUpdateManyWithoutRulesInput>
  }

  export type ConditionScalarWhereInput = {
    AND?: ConditionScalarWhereInput | ConditionScalarWhereInput[]
    OR?: ConditionScalarWhereInput[]
    NOT?: ConditionScalarWhereInput | ConditionScalarWhereInput[]
    id?: IntFilter<"Condition"> | number
    operator?: StringFilter<"Condition"> | string
    value?: StringFilter<"Condition"> | string
    id_variable?: IntFilter<"Condition"> | number
    id_rule?: IntFilter<"Condition"> | number
    type?: Enumconditions_typeFilter<"Condition"> | $Enums.conditions_type
  }

  export type VariableCreateWithoutValuesInput = {
    name: string
  }

  export type VariableUncheckedCreateWithoutValuesInput = {
    id?: number
    name: string
  }

  export type VariableCreateOrConnectWithoutValuesInput = {
    where: VariableWhereUniqueInput
    create: XOR<VariableCreateWithoutValuesInput, VariableUncheckedCreateWithoutValuesInput>
  }

  export type VariableUpsertWithoutValuesInput = {
    update: XOR<VariableUpdateWithoutValuesInput, VariableUncheckedUpdateWithoutValuesInput>
    create: XOR<VariableCreateWithoutValuesInput, VariableUncheckedCreateWithoutValuesInput>
    where?: VariableWhereInput
  }

  export type VariableUpdateToOneWithWhereWithoutValuesInput = {
    where?: VariableWhereInput
    data: XOR<VariableUpdateWithoutValuesInput, VariableUncheckedUpdateWithoutValuesInput>
  }

  export type VariableUpdateWithoutValuesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type VariableUncheckedUpdateWithoutValuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ValuesCreateWithoutVariableInput = {
    name: string
    type: string
  }

  export type ValuesUncheckedCreateWithoutVariableInput = {
    id?: number
    name: string
    type: string
  }

  export type ValuesCreateOrConnectWithoutVariableInput = {
    where: ValuesWhereUniqueInput
    create: XOR<ValuesCreateWithoutVariableInput, ValuesUncheckedCreateWithoutVariableInput>
  }

  export type ValuesCreateManyVariableInputEnvelope = {
    data: ValuesCreateManyVariableInput | ValuesCreateManyVariableInput[]
    skipDuplicates?: boolean
  }

  export type ValuesUpsertWithWhereUniqueWithoutVariableInput = {
    where: ValuesWhereUniqueInput
    update: XOR<ValuesUpdateWithoutVariableInput, ValuesUncheckedUpdateWithoutVariableInput>
    create: XOR<ValuesCreateWithoutVariableInput, ValuesUncheckedCreateWithoutVariableInput>
  }

  export type ValuesUpdateWithWhereUniqueWithoutVariableInput = {
    where: ValuesWhereUniqueInput
    data: XOR<ValuesUpdateWithoutVariableInput, ValuesUncheckedUpdateWithoutVariableInput>
  }

  export type ValuesUpdateManyWithWhereWithoutVariableInput = {
    where: ValuesScalarWhereInput
    data: XOR<ValuesUpdateManyMutationInput, ValuesUncheckedUpdateManyWithoutVariableInput>
  }

  export type ValuesScalarWhereInput = {
    AND?: ValuesScalarWhereInput | ValuesScalarWhereInput[]
    OR?: ValuesScalarWhereInput[]
    NOT?: ValuesScalarWhereInput | ValuesScalarWhereInput[]
    id?: IntFilter<"Values"> | number
    name?: StringFilter<"Values"> | string
    type?: StringFilter<"Values"> | string
    id_variable?: IntFilter<"Values"> | number
  }

  export type ConditionCreateManyRulesInput = {
    id?: number
    operator: string
    value: string
    id_variable: number
    type: $Enums.conditions_type
  }

  export type ConditionUpdateWithoutRulesInput = {
    operator?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    id_variable?: IntFieldUpdateOperationsInput | number
    type?: Enumconditions_typeFieldUpdateOperationsInput | $Enums.conditions_type
  }

  export type ConditionUncheckedUpdateWithoutRulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    operator?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    id_variable?: IntFieldUpdateOperationsInput | number
    type?: Enumconditions_typeFieldUpdateOperationsInput | $Enums.conditions_type
  }

  export type ConditionUncheckedUpdateManyWithoutRulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    operator?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    id_variable?: IntFieldUpdateOperationsInput | number
    type?: Enumconditions_typeFieldUpdateOperationsInput | $Enums.conditions_type
  }

  export type ValuesCreateManyVariableInput = {
    id?: number
    name: string
    type: string
  }

  export type ValuesUpdateWithoutVariableInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type ValuesUncheckedUpdateWithoutVariableInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }

  export type ValuesUncheckedUpdateManyWithoutVariableInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use RulesCountOutputTypeDefaultArgs instead
     */
    export type RulesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RulesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VariableCountOutputTypeDefaultArgs instead
     */
    export type VariableCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VariableCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConditionDefaultArgs instead
     */
    export type ConditionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ConditionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RulesDefaultArgs instead
     */
    export type RulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RulesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ValuesDefaultArgs instead
     */
    export type ValuesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ValuesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VariableDefaultArgs instead
     */
    export type VariableArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VariableDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}